
var group_users = {};
var user_coordinates = {};
var group_details = {};

var user_paths = {};

var mymap = {};

var planes = {};

var lastline = [];

var user_polylines = [];
var user_markers = [];

var layergroup = {};

var initMap = function(){

    mymap = L.map('mapid');
    mymap.locate({setView: true, maxZoom: 11});

    function onLocationError(e) {
    alert(e.message);
    }

    mymap.on('locationerror', onLocationError);

    // L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
    //   attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
    //   maxZoom: 18,
    //   id: 'mapbox.streets',
    //   accessToken: 'pk.eyJ1IjoicGhhbmlnYW50aSIsImEiOiJjaXJ4dWJrbWQwMDh3MnpxZWJ5emh2djhrIn0.KF7Dwo7HD8Owe5uryb6eaQ'
    // }).addTo(mymap);
    L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/streets-v9/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoicGhhbmlnYW50aSIsImEiOiJjaXJ4dWJrbWQwMDh3MnpxZWJ5emh2djhrIn0.KF7Dwo7HD8Owe5uryb6eaQ', {
      maxZoom: 18
    }).addTo(mymap);

    updateLiveMap(user_coordinates);

    // This is the piece of code to display the destination displayed on to the page. The destination coordinates are based on the meetings point from the users page.

  var meetingPoint = L.circle([group_details.latitude, group_details.longitude], 200, {
      color: 'red',
      fillColor: '#f03',
      fillOpacity: 0.7
  }).addTo(mymap);


  setInterval(getLocation, 1000*30);
  setInterval(getGroupLocations, 1000*10);

};

$(document).ready(function(){

  $.ajax({
    url: '/get_group_details',
    type: 'GET',
    dataType: 'json',
    data: {group_id:group_id}

    }).done(function(data){
      // console.log('success', data);
      group_users = data.users;
      user_coordinates = data.coordinates;
      group_details = data.group;
      console.log('user_coordinates',user_coordinates);

      initMap();
    })
    .fail(function(data){
      console.log('fail', data);
    });

}); // document ready


//This is from HTML 5 doctor to read the location from the browser and throws error if the browser does not support the geolocation

function getLocation(){
  console.log('getLocation');
  if (navigator.geolocation) {
    // var timeoutVal = 10 * 1000 * 1000;
    navigator.geolocation.getCurrentPosition(showPosition);
  }
  else {
    alert("Geolocation is not supported by this browser");
  }
}

//This is the function to get the current position of the user and sends it to the database via ajax request
function showPosition(position) {

  console.log('showPosition');
  $.ajax({
        url: '/submit_position',
        type: 'GET',
        // dataType: 'json',
        data: { lat: position.coords.latitude, lng: position.coords.longitude, group_id: group_id },
        contentType: 'application/json'})
        .done(function(data){
          console.log('success', data);
        })
        .fail(function(data){
          console.log('fail', data);
        });
}


var clearMap = function (){

  _.each(user_polylines, function(v, k){

  });


  _.each(user_polylines, function(v, k){

  });

};

var updateLiveMap = function(coordinates){

  console.log('updateLiveMap()');

  // planes = {};

  // // construct the correct array structure for leaflet display
  // _.each(coordinates, function(val, key){
  //   // console.log('val,key', val, key, group_users  );
  //   _.each(val, function(position, index){
  //     var name = group_users[ position.user_id ].name;
  //     planes[ name ] = planes[ name ] || [];
  //     planes[ name ].push( [position.latitude, position.longitude] );
  //   });
  // });
  // console.log('planes', planes);


    // clearMap();

    //Leaflet draw polyline and set the new marker after you clear the map
  _.each(planes, function(v,k){
    var lastPosition = _.last(v);
    console.log(lastPosition);

  //  var drawpolyline = new L.Polyline(v, {
  //     color: 'maroon',
  //     weight: 3,
  //     opacity: 0.5,
  //     smoothFactor: 1
   //
  //   });
   //
  //   drawpolyline.addTo(mymap);
  //   user_polylines.push( drawpolyline );

    marker = L.userMarker(lastPosition, {pulsing:true, accuracy:100, smallIcon:false})
    				.bindPopup(k)
    				.addTo(mymap);
    console.log("marker:", marker);
    marker.setLatLng(lastPosition);

    // user_markers.push ( marker );

    // layergroup.addLayer( marker );

            // {icon: customIcon}
    // marker.setAccuracy(400); // 400 meters accuracy
  }); //each


};

var getGroupLocations = function(){

  $.ajax({
        url: '/get_group_coordinates',
        type: 'GET',
        // dataType: 'json',
        data: { group_id: group_id },
        contentType: 'application/json'})
        .done(function(data){
          console.log('success', data.coordinates);
          coords = data.coordinates;

          // _.each(coords, function(val, key){
          //   user_coordinates[]
          // });
          updateLiveMap(coords);

        })
        .fail(function(data){
          console.log('fail', data);
        });
};

var clearMap = function(m){

  // _.each(user_polylines, function(v, k){
  //   mymap.removeLayer(v);
  // });

  _.each(user_markers, function(v, k){
    mymap.removeLayer(v);
  });

  user_polylines = [];
  user_markers = [];

};
